### YamlMime:GraphOperation
uid: graph.extensibility_schema_groups
metadata:
  content_git_url: https://github.com/microsoftgraph/microsoft-graph-docs/blob/master/concepts/extensibility_schema_groups.md
summary:
  heading: Add custom data to groups using schema extensions
  intro: |
    We're going to walk you through an example to demonstrate how to use *schema extensions*. 
    Imagine you're a developer in a Learning Management Software company called “Graph Learn” that builds training courses and materials for businesses.  Office 365 groups, with their rich collaborative experiences, 
    is a fantastic way to deliver course content and record exercises among participants for both online courses and instructor-led courses.  You may want to make 
    those Office 365 groups used for training courses easily identifiable as training courses, which will allow other developers to discover your groups and build rich experiences on top of your learning courses.
    For this scenario, we're going to show you how to:
    
    1. View available schema extension definitions that you could use.
    1. Register a schema extension definition that targets groups for training courses.
    1. Create a new group with extended data based on the schema extension definition that you just registered.
    1. Add, update, or remove custom data in an existing group based on a schema extension definition.
    1. Read back a group and the extension data.
    
    
  outro: |
    ## 1. View available schema extensions
    First, as a developer, you might want to find any other schema extension definitions that our app could reuse.  This can be done by querying the **schemaExtension** resource.  
    In the example below, you're going to query for a specific schema extension by **id**.
    Notice that the extension returned in the response has **Available** as the **status** value, which indicates that any app which has permission to the resources in the **targetTypes** property can use and update the extension
    with additive changes. In general, this operation returns any schema extensions that satisfy the specified filter regardless of **status**, so do check the extension status before using it.
requestBody:
  heading: Request
  intro: |
    GET https://graph.microsoft.com/v1.0/schemaExtensions?$filter=id eq 'graphlearn_test'

response:
  heading: Response
  intro: |
    HTTP/1.1 200 OK
    Content-Type: application/json
    Content-length: 420
    {
        "value": [
            {
                "id":"graphlearn_test",
                "description": "Yet another test schema",
                "targetTypes": [
                    "User", "Group"
                ],
                "status": "Available",
                "owner": "24d3b144-21ae-4080-943f-7067b395b913",
                "properties": [
                    {
                        "name": "testName",
                        "type": "String"
                    }
                ]
            }
        ]
    }

  outro: |
    ## 2. Register a schema extension definition that describes a training course
    If you can't find a schema extension that *is* appropriate for your needs, you can create and register a new extension definition for training courses on the **group** resource.  
    When creating a schema extension definition, you should provide a string for the **id** property. There are two ways to do this. The following example shows the preferred
    way, which uses a vanity domain name (`graphlearn.com`) that has been verified with your tenant. Concatenate the verified domain name (`graphlearn`) with a name 
    for the schema extension (`courses`), and assign **id** with the resultant string, `graphlearn_courses`.  
    Then, specify a description (to enable discoverability), target types 
    (defining which resources this extension applies to), and the custom properties that make up the schema.  In this example, 
    specify the `courseId`, `courseName` and `courseType` custom properties and their types.
    See an [example of the other way to assign **id** in the request](xref:graph.schemaextension_post_schemaextensions#request-2), that requires you to provide only a schema name.
    Notice that when you initially create a schema extension, its status is **InDevelopment**. While you're developing the extension, you can keep it in this status, 
    during which only your app that created it can update it with additive changes or delete it. When you are ready to share the extension for use by other apps, set **status** to **Available**.
    POST https://graph.microsoft.com/v1.0/schemaExtensions
    Content-type: application/json
    {
        "id":"graphlearn_courses",
        "description": "Graph Learn training courses extensions",
        "targetTypes": [
            "Group"
        ],
        "properties": [
            {
                "name": "courseId",
                "type": "Integer"
            },
            {
                "name": "courseName",
                "type": "String"
            },
            {
                "name": "courseType",
                "type": "String"
            }
        ]
    }

    HTTP/1.1 201 Created
    Content-Type: application/json
    Content-length: 420
    {
        "id": "graphlearn_courses",
        "description": "Graph Learn training courses extensions",
        "targetTypes": [
            "Group"
        ],
        "status": "InDevelopment",
        "owner": "24d3b144-21ae-4080-943f-7067b395b913",
        "properties": [
            {
                "name": "courseId",
                "type": "Integer"
            },
            {
                "name": "courseName",
                "type": "String"
            },
            {
                "name": "courseType",
                "type": "String"
            }
        ]
    }

