### YamlMime:GraphOperation
uid: graph.delta_query_messages
metadata:
  content_git_url: https://github.com/microsoftgraph/microsoft-graph-docs/blob/master/concepts/delta_query_messages.md
summary:
  heading: "Get incremental changes to messages in a folder"
  intro: |
    Delta query lets you query for additions, deletions, or updates to messages in a folder, by way of a series of
    [delta](xref:graph.message_delta) function calls. Delta data enables you to maintain
    and synchronize a local store of a user's messages,
    without having to fetch the entire set of the user's messages from the server every time.
    Delta query supports both full synchronization that retrieves all of the messages in a folder (for example, the user's Inbox),
    and incremental synchronization that retrieves all of the messages that have changed in that folder since
    the last synchronization. Typically, you would do an initial full synchronization of all the messages in a folder, and
    subsequently, get incremental changes to that folder periodically.
  outro: |
    ## Track message changes in a folder
    Delta query is a per-folder operation. To track the changes of the messages in a folder hierarchy, you need to track each folder individually.
    Tracking message changes in a mail folder typically is a round of one or more GET requests with the **delta** function. The initial GET
    request is very much like the way you [get messages](https://developer.microsoft.com/en-us/graph/docs/api-reference/v1.0/api/user_list_messages),
    except that you include the **delta** function:
    GET https://graph.microsoft.com/v1.0/me/mailFolders/{id}/messages/delta

    A GET request with the **delta** function returns either:
    
    * A `nextLink` (that contains a URL with a **delta** function call and a _skipToken_), or
    * A `deltaLink` (that contains a URL with a **delta** function call and _deltaToken_).
    
    These tokens are [state tokens](xref:graph.delta_query_overview#state-tokens) that are completely opaque to the client.
    To proceed with a round of change tracking, simply copy and apply the URL returned from the last GET
    request to the next **delta** function call for the same folder. A `deltaLink` returned in a response
    signifies that the current round of change tracking is complete. You can save and use the `deltaLink` URL
    when you begin the next round.
    See the [example](#example-to-synchronize-messages-in-a-folder) below to learn how to use the `nextLink` and
    `deltaLink` URLs.
examples:
- items:
  - request:
      heading: "Example to synchronize messages in a folder"
      intro: |
        The following example shows 2 rounds of synchronization of a specific folder which initially contains 5 messages.
        The first round involves a series of 3 requests to synchronize all 5 messages in the folder:
        
        * [Sample initial request](#sample-initial-request) and [response](#sample-initial-response)
        * [Sample second request](#sample-second-request) and [response](#sample-second-response)
        * [Sample third request](#sample-third-request) and [final response](#sample-third-and-final-response)
        
        After the first round, one of the messages is deleted, and another is marked as read. The [second round](#synchronize-messages-in-the-same-folder-in-the-next-round) of synchronization returns only the delta (the deletion and update), without returning the other messages that have remained the same.
  - request:
      heading: "Sample initial request"
      intro: |
        In this example, the specified folder is being synchronized for the first time, so the initial sync request does not include any state token.
        This round will return all the messages in that folder.
        The first request specifies the following:
        
        * A `$select` parameter to return the `subject`, `sender`, and `isRead` properties for each message in the response.
        * The [optional request header](#optional-request-header), _odata.maxpagesize_, returning 2 messages at a time.
        
      sampleCode: |
        ```http
        GET https://graph.microsoft.com/v1.0/me/mailfolders/AQMkADNkNAAAgEMAAAA/messages/delta?$select=subject,sender,isRead HTTP/1.1
        Prefer: odata.maxpagesize=2
        ```
        
  - request:
      heading: "Sample initial response"
      intro: |
        The response includes two messages and an `@odata.nextLink` response header.
        The `nextLink` URL indicates there are more messages in the folder to get.
      sampleCode: |
        ```json
        {
          "@odata.context": "https://graph.microsoft.com/v1.0/$metadata#Collection(message)",
          "@odata.nextLink": "https://graph.microsoft.com/v1.0/me/mailfolders('AQMkADNkNAAAgEMAAAA')/messages/delta?$skiptoken=GwcBoTmPuoTQWfcsAbkYM",
          "value": [
            {
              "@odata.type": "#microsoft.graph.message",
              "@odata.etag": "W/\"CQAAABYAAAARn2vdzPFjSbaPPxzjlzOTAAASsKZz\"",
              "subject": "Holiday hours update",
              "isRead": "false",
              "sender": {
                "emailAddress": {
                  "name": "Dana Swope",
                  "address": "danas@contoso.onmicrosoft.com"
                }
              },
              "id": "AAMkADNkNAAASq35xAAA="
            },
            {
              "@odata.type": "#microsoft.graph.message",
              "@odata.etag": "W/\"CQAAABYAAAARn2vdzPFjSbaPPxzjlzOTAAAEfYB/\"",
              "subject": "Holiday promotion sale",
              "isRead": "true",
              "sender": {
                "emailAddress": {
                  "name": "Samantha Booth",
                  "address": "samanthab@contoso.onmicrosoft.com"
                }
              },
              "id": "AQMkADNkNAAAVRMKAAAAA=="
            }
          ]
        }
        ```
        
  - request:
      heading: "Sample second request"
      intro: |
        The second request specifies the `nextLink` URL returned from the previous response. Notice that it no longer has to specify
        the same `$select` parameter as in the initial request, as the `skipToken` in the `nextLink` URL encodes and includes it.
      sampleCode: |
        ```http
        GET https://graph.microsoft.com/v1.0/me/mailfolders/AQMkADNkNAAAgEMAAAA/messages/delta?$skiptoken=GwcBoTmPuoTQWfcsAbkYM HTTP/1.1
        Prefer: odata.maxpagesize=2
        ```
        
  - request:
      heading: "Sample second response"
      intro: |
        The second response returns the next 2 messages in the folder and another `nextLink`, indicating there are
        more messages to get from the folder.
      sampleCode: |
        ```json
        {
          "@odata.context": "https://graph.microsoft.com/v1.0/$metadata#Collection(message)",
          "@odata.nextLink": "https://graph.microsoft.com/v1.0/me/mailfolders('AQMkADNkNAAAgEMAAAA')/messages/delta?$skiptoken=GwcBoTmPKILK4jLH7mAd1lLU",
          "value": [
            {
              "@odata.type": "#microsoft.graph.message",
              "@odata.etag": "W/\"CQAAABYAAAARn2vdzPFjSbaPPxzjlqfdAAAEfYB+\"",
              "subject": "Microsoft Virtual Academy at Contoso",
              "isRead": true,
              "sender": {
                "emailAddress": {
                  "name": "Elliot Hyde",
                  "address": "elliot-hyde@tailspintoys.com"
                }
              },
              "id": "AQMkADNkNAAAgWkAAAA"
            },
            {
              "@odata.type": "#microsoft.graph.message",
              "@odata.etag": "W/\"CQAAABYAAAARn2vdzPFjSbaPPxzjlzOTAAAEfYB+\"",
              "subject": "New or modified user account information",
              "isRead": true,
              "sender": {
                "emailAddress": {
                  "name": "Randi Welch",
                  "address": "randiw@contoso.onmicrosoft.com"
                }
              },
              "id": "AQMkADNkNAAAgWJAAAA"
            }
          ]
        }
        ```
        
  - request:
      heading: "Sample third request"
      intro: |
        The third request continues to use the latest `nextLink` URL returned from the last sync request.
      sampleCode: |
        ```
        GET https://graph.microsoft.com/v1.0/me/mailFolders/AQMkADNkNAAAgEMAAAA/messages/delta?$skiptoken=GwcBoTmPKILK4jLH7mAd1lLU HTTP/1.1
        Prefer: odata.maxpagesize=2
        ```
        
  - request:
      heading: "Sample third and final response"
      intro: |
        The third response returns the only remaining message in the folder, and a `deltaLink` URL which indicates
        synchronization is complete for the time being for this folder. Save and use the `deltaLink` URL to
        [synchronize the same folder in the next round](#synchronize-messages-in-the-same-folder-in-the-next-round).
      sampleCode: |
        ```json
        {
          "@odata.context": "https://graph.microsoft.com/v1.0/$metadata#Collection(message)",
          "@odata.deltaLink": "https://graph.microsoft.com/v1.0/me/mailfolders('AQMkADNkNAAAgEMAAAA')/messages/delta?$deltatoken=GwcBoTmPuoGNlgXgF1nyUNMXY",
          "value": [
            {
              "@odata.type": "#microsoft.graph.message",
              "@odata.etag": "W/\"CQAAABYAAAARn2vdzFPjSbaPPxzjlzOTAAAEfYB+\"",
              "subject": "Fabric CDN now available",
              "isRead": true,
              "sender": {
                "emailAddress": {
                  "name": "Jodie Sharp",
                  "address": "Jodie.Sharp@contoso.com"
                }
              },
              "id": "AAMkADk0MGFkODE3LWEAAA="
            }
          ]
        }
        ```
        
  - request:
      heading: "Synchronize messages in the same folder in the next round"
      intro: |
        Using the `deltaLink` from the [last request](#sample-third-request) in the last round,
        you will be able to get only those messages that have changed (by being added, deleted, or updated) in that folder since then.
        Your first request in the next round will look like the following, assuming you prefer to keep the same maximum page size in the response:
      sampleCode: |
        ```http
        GET https://graph.microsoft.com/v1.0/me/mailfolders/AQMkADNkNAAAgEMAAAA/messages/delta?$deltatoken=GwcBoTmPuoGNlgXgF1nyUNMXY HTTP/1.1
        Prefer: odata.maxpagesize=2
        ```
        
      outro: |
        The response contains a `deltaLink`. This indicates that all changes in the remote mail folder are now synchronized. One message was deleted and the other message was changed.
        
        ```json
        {
          "@odata.context": "https://graph.microsoft.com/v1.0/$metadata#Collection(message)",
          "@odata.deltaLink": "https://graph.microsoft.com/v1.0/me/mailfolders('AQMkADNkNAAAgEMAAAA')/messages/delta?$deltatoken=GwcBoTmPuoGNlgXgF1nyUNMXY",
          "value": [
            {
              "@odata.type": "#microsoft.graph.message",
              "id": "AAMkADk0MGFkODE3LWE4MmYtNDRhOS0Dh_6qB-pB2Sa2pUum19a6YAAKnLuxoAAA=",
              "@removed": {
                "reason": "deleted"
              }
            },
            {
              "@odata.type": "#microsoft.graph.message",
              "@odata.etag": "W/\"CQAAABYAAAARn2vdzPFjSbaPPxzjlzOTAAASsKZz\"",
              "subject": "Holiday hours update",
              "isRead": "true",
              "sender": {
                "emailAddress": {
                  "name": "Dana Swope",
                  "address": "danas@contoso.onmicrosoft.com"
                }
              },
              "id": "AAMkADNkNAAASq35xAAA="
            }
          ]
        }
        ```
        
