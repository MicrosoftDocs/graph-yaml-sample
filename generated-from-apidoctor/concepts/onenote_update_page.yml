### YamlMime:GraphOperation
uid: graph.onenote_update_page
metadata:
  content_git_url: https://github.com/microsoftgraph/microsoft-graph-docs/blob/master/concepts/xref:graph.onenote_update_page
summary:
  heading: "Update OneNote page content"
  intro: |
    **Applies to** Consumer notebooks on OneDrive | Enterprise notebooks on Office 365
    To update the content of a OneNote page, you send a PATCH request to the page's *content* endpoint:
    `PATCH ../notes/pages/{id}/content`</p>
    Send a JSON change object in the message body. If the request is successful, Microsoft Graph returns a 204 HTTP status code.
    <a name="request-uri"></a>
  outro: |
    ## Construct the request URI
    To construct the request URI, start with the service root URL:
    `https://graph.microsoft.com/v1.0/me/onenote`
    <br/>
    Then append the page's *content* endpoint:
    
    * **Get the page HTML and all defined *data-id* values**<br/><br/>`../pages/{id}/content`   
    * **Get the page HTML, all defined *data-id* values, and all generated *id* values**<br/><br/>`../pages/{page-id}/content?includeIDs=true` 
    
    The **data-id** and **id** values are used as **target** identifiers for the elements you want to update.
    Your full request URI will look like this:<br/><br/>`https://graph.microsoft.com/v1.0/me/onenote/pages/{id}/content`
    Learn more about the [service root URL](../api-reference/v1.0/resources/onenote-api-overview.md#root-url).
    <a name="message-body"></a>
permissions:
  heading: "Permissions"
  intro: |
    To update OneNote pages, you'll need to request appropriate permissions. Choose the lowest level of permissions that your app needs to do its work.
    
    * Notes.ReadWrite
    * Notes.ReadWrite.All
    
    For more information about permission scopes and how they work, see [OneNote permission scopes](xref:graph.permissions_reference).
    <a name="see-also"></a>
  outro: |
    ## See also
    
    * [Add images and files](xref:graph.onenote_images_files)
    * [Integrate with OneNote](xref:graph.integrate_with_onenote)
    * [OneNote Developer Blog](http://go.microsoft.com/fwlink/?LinkID=390183)
    * [OneNote development questions on Stack Overflow](http://go.microsoft.com/fwlink/?LinkID=390182)
    * [OneNote GitHub repos](http://go.microsoft.com/fwlink/?LinkID=390178)  
    
examples:
- items:
  - request:
      heading: "Example requests"
      intro: |
        An update request contains one or more changes represented as JSON change objects. These objects can define different targets on the page and different actions and content for the targets.
        The following examples include JSON objects used in PATCH requests and complete PATCH requests:
        
        * [Append child elements](#append-child-elements)
        * [Insert sibling elements](#insert-sibling-elements)
        * [Replace elements](#replace-elements)
        * [Complete PATCH requests](#complete-patch-request-examples)
        
        <a name="append-examples"></a>
  - request:
      heading: "Append child elements"
      intro: |
        The **append** action adds a child to a **body**, **div** (within a div), **ol**, or **ul** element. The **position** attribute determines whether to append the child before or after the target. The default position is **after**.
  - request:
      heading: "Append to a div"
      intro: |
        The following example adds two child nodes to the **div1** element. It adds an image as the first child and a paragraph as the last child. 
        [
         {
            'target':'#div1',
            'action':'append',
            'position':'before',
            'content':'<img data-id="first-child" src="image-url-or-part-name" />'
          },
          {
            'target':'#div1',
            'action':'append',
            'content':'<p data-id="last-child">New paragraph appended to the div</p>'
          }
        ]

  - request:
      heading: "Append to the *body* element"
      intro: |
        You can use the **body** shortcut to append a child element inside the first div on any page.
        The following example adds two paragraphs as the first child and the last child to the first div on the page. Don't use a # with the **body** target. This example uses the **prepend** action as a shortcut for **append** + **before**.
        [
          {
            'target':'body',
            'action':'prepend',
            'content':'<p data-id="first-child">New paragraph as first child in the first div</p>'
          },
          {
            'target':'body',
            'action':'append',
            'content':'<p data-id="last-child">New paragraph as last child in the first div</p>'
          }
        ]

  - request:
      heading: "Append to a list"
      intro: |
        The following example adds a list item as a last child to the target list. The **list-style-type** property is defined because the item uses a non-default list style.
        [
          {
            'target':'#circle-ul',
            'action':'append',
            'content':'<li style="list-style-type:circle">Item at the end of the list</li>'
          }
        ]

        <a name="insert-examples"></a>
  - request:
      heading: "Insert sibling elements"
      intro: |
        The **insert** action adds a sibling to the target element. The **position** attribute determines whether to insert the sibling before or after the target. The default position is **after**. See [elements that support **insert**](#supported-elements-and-actions).
  - request:
      heading: "Insert siblings"
      intro: |
        The following example adds two sibling nodes to the page. It adds an image above the **para1** element and a paragraph below the **para2** element.
        [
          {
             'target':'#para1',
             'action':'insert',
             'position':'before',
             'content':'<img src="image-url-or-part-name" alt="Image inserted above the target" />'
          },
          {
            'target':'#para2',
             'action':'insert',
             'content':'<p data-id="next-sibling">Paragraph inserted below the target</p>'
          }
        ]

        <a name="replace-examples"></a>
  - request:
      heading: "Replace elements"
      intro: |
        You can use either the **data-id** or generated **id** as the target value to replace **img** and **object** elements that are within a div. To replace the page title, use the **title** keyword. For all other [elements that support **replace**](#supported-elements-and-actions), you must use the generated ID.
  - request:
      heading: "Replace an image"
      intro: |
        The following example replaces an image with a div by using the image's **data-id** as the target. 
        [
          {
            'target':'#img1',
            'action':'replace',
            'content':'<div data-id="new-div"><p>This div replaces the image</p></div>'
          }
        ]

  - request:
      heading: "Update a table"
      intro: |
        This example shows how to update a table by using its generated ID. Replacing **tr** and **td** elements is not supported, but you can replace the entire table.
        [
          {
            'target':'table:{de3e0977-94e4-4bb0-8fee-0379eaf47486}{11}',
            'action':'replace',
            'content':'<table data-id="football">
              <tr><td><p><b>Brazil</b></p></td><td><p>Germany</p></td></tr>
              <tr><td><p>France</p></td><td><p><b>Italy</b></p></td></tr>
              <tr><td><p>Netherlands</p></td><td><p><b>Spain</b></p></td></tr>
              <tr><td><p>Argentina</p></td><td><p><b>Germany</b></p></td></tr></table>'
          }
        ]

  - request:
      heading: "Change the title"
      intro: |
        This example shows how to change the title of a page. To change the title, use the **title** keyword as the target value. Don't use a # with the title target.
        [
          {
            'target':'title',
            'action':'replace',
            'content':'New title'
          }
        ]

  - request:
      heading: "Update a to-do item"
      intro: |
        The following example uses the replace action to change a to-do check box item to a completed state.
        [
          {
            'target':'#task1',
            'action':'replace',
            'content':'<p data-tag="to-do:completed" data-id="task1">First task</p>'
          }
        ]

        See [Use note tags](xref:graph.onenote-note-tags) for more about using the **data-tag** attribute.
        <a name="complete-requests"></a>
  - request:
      heading: "Complete PATCH request examples"
      intro: |
        The following examples show complete PATCH requests.
  - request:
      heading: "Request with text content only"
      intro: |
        The following example shows a PATCH request that uses the **application/json** content type. You can use this format when your content doesn't contain binary data.
        PATCH https://graph.microsoft.com/v1.0/me/onenote/notebooks/pages/{page-id}/content
        
        Content-Type: application/json
        Authorization: Bearer {token}
        
        [
           {
            'target':'#para-id',
            'action':'insert',
            'position':'before',
            'content':'<img src="image-url" alt="New image from a URL" />'
          }, 
          {
            'target':'#list-id',
            'action':'append',
            'content':'<li>Item at the bottom of the list</li>'
          }
        ]

        <a name="multipart"></a>
  - request:
      heading: "Multipart request with binary content"
      intro: |
        The following example shows a multipart PATCH request that includes binary data. Multipart requests require a "Commands" part that specifies the **application/json** content type and contains the array of JSON change objects. Other data parts can contain binary data. Part names typically are strings appended with the current time in milliseconds or a random GUID.
        PATCH https://graph.microsoft.com/v1.0/me/onenote/notebooks/pages/{page-id}/content
        
        Content-Type: multipart/form-data; boundary=PartBoundary123
        Authorization: Bearer {token}
        
        --PartBoundary123
        Content-Disposition: form-data; name="Commands"
        Content-Type: application/json
        
        [
          {
            'target':'img:{2998967e-69b3-413f-a221-c1a3b5cbe0fc}{42}',
            'action':'replace',
            'content':'<img src="name:image-part-name" alt="New binary image" />'
          }, 
          {
            'target':'#list-id',
            'action':'append',
            'content':'<li>Item at the bottom of the list</li>'
          }
        ]
        
        --PartBoundary123
        Content-Disposition: form-data; name="image-part-name"
        Content-Type: image/png
        
        ... binary image data ...
        
        --PartBoundary123--

        <a name="request-response-info"></a>
  - request:
      heading: "Request and response information for PATCH requests"
      intro: |
        |Request data|Description|
        |-|-|  -
        |Protocol|All requests use the SSL/TLS HTTPS protocol.|
        |Authorization header|<p>`Bearer {token}`, where `{token}` is a valid OAuth 2.0 access token for your registered app.</p><p>If missing or invalid, the request fails with a 401 status code. See [Authentication and permissions](xref:graph.permissions_reference).</p>|
        |Content-Type header|<p>`application/json` for the array of JSON change objects, whether sent directly in the message body or in the required "Commands" part of [multipart requests](#multipart-request-with-binary-content).</p><p>Multipart requests are required when sending binary data, and use the `multipart/form-data; boundary=part-boundary` content type, where `{part-boundary}` is a string that signals the start and end of each data part.</p>|
        <br/> 
        |Response data|Description|
        |-|-|  -
        |Success code|A 204 HTTP status code. No JSON data is returned for a PATCH request.|
        |Errors|Read [Error codes for OneNote APIs in Microsoft Graph](xref:graph.onenote_error_codes) to learn about OneNote errors that Microsoft Graph can return.|
        <a name="root-url"></a>
      outro: |
        ### Constructing the Microsoft Graph service root URL
        The OneNote service root URL uses the following format for all calls to the OneNote API:
        `https://graph.microsoft.com/{version}/me/onenote/`
        The `version` segment in the URL represents the version of Microsoft Graph that you want to use. `v1.0` is for stable production code. `beta` is to try out a feature that's in development. Features and functionality in beta may change, so you shouldn't use it in your production code.
        `me` is for OneNote content that the current user can access (owned and shared). `users/{id}` is for OneNote content that the specified user (in the URL) has shared with the current user. Use the [Azure AD Graph API](https://msdn.microsoft.com/library/azure/ad/graph/api/api-catalog).
        
        <a name="permissions"></a>
