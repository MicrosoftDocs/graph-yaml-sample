### YamlMime:GraphOperation
uid: graph.python
metadata:
  content_git_url: https://github.com/microsoftgraph/microsoft-graph-docs/blob/master/concepts/python.md
summary:
  heading: Get started with Microsoft Graph in a Python app
  intro: |
    This article describes the tasks required to get an access token from Azure AD and call Microsoft Graph. It walks you through [Sending mail via Microsoft Graph from Python](https://github.com/microsoftgraph/python-sample-send-mail) and explains the main concepts that you implement to use the Microsoft Graph API. The article describes how to access Microsoft Graph by using direct REST calls.
    ![Send mail form](https://raw.githubusercontent.com/microsoftgraph/python-sample-send-mail/master/static/images/sendmail.png)
  outro: |
    ## Choosing an authentication library
    To make calls to Microsoft Graph, your app must obtain a valid access token from Azure Active Directory (Azure AD), the Microsoft cloud identity service, and the token must be passed in an HTTP header with each call to the Microsoft Graph REST API. Graph's approach to authentication is based on the OAuth 2.0 and Open ID Connect standards, so there are many [authentication libraries](https://docs.microsoft.com/en-us/azure/active-directory/develop/active-directory-v2-libraries) that you can choose from to implement authentication in your application.
    The sample covered below uses the [Flask-OAuthlib](https://flask-oauthlib.readthedocs.io/en/latest/) library to implement OAuth 2.0 [Authorization Code Grant](https://tools.ietf.org/html/rfc6749#section-4.1) workflow, which is the recommended auth workflow for web applications written in Python. For information about other authentication options, see [Python authentication samples for Microsoft Graph](https://github.com/microsoftgraph/python-sample-auth).
