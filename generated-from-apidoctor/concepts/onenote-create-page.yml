### YamlMime:GraphOperation
uid:graph.onenote-create-page
metadata:
  content_git_url: https://github.com/microsoftgraph/microsoft-graph-docs/blob/master/concepts/onenote-create-page.md
summary:
  heading: Create OneNote pages
  intro: |
    **Applies to**: Consumer notebooks on OneDrive | Enterprise notebooks on Office 365
    To create a OneNote page, you send a POST request to a *pages* endpoint. For example:
    `POST ../notes/sections/{id}/pages`
    <br/>
    Send the HTML that defines the page in the message body. If the request is successful, Microsoft Graph returns a 201 HTTP status code.
    
    <a name="request-uri"></a>
  outro: |
    ## Construct the request URI
    To construct the POST request URI, start with the service root URL:
    `https://graph.microsoft.com/v1.0/me/onenote`
    <br/>
    Then append the *pages* endpoint:
    
    * **Create a page in any section (specified by section name)**<br/><br/>`.../pages?sectionName=DefaultSection`
    * **Create a page in any section (specified by ID)**<br/><br/>`.../sections/{section-id}/pages` 
    
    If you're creating pages in the user's personal notebook, Microsoft Graph also provides endpoints you can use to create pages in the default notebook:
    
    * **Create a page in the default section of the default notebook**<br/><br/>`../pages` 
    
    Your full request URI will look like one of these examples:
    
    * `https://graph.microsoft.com/v1.0/me/onenote/sections/{id}/pages`
    * `https://graph.microsoft.com/v1.0/me/onenote/pages?sectionName=Homework`
    
    Learn more about the [service root URL](../api-reference/v1.0/resources/onenote-api-overview.md#root-url).
    <a name="post-pages-section-name"></a>
permissions:
  heading: Permissions
  intro: |
    To create OneNote pages, you'll need to request appropriate permissions. Choose the lowest level of permissions that your app needs to do its work.
    Choose from:
    
    * Notes.Create
    * Notes.ReadWrite
    * Notes.ReadWrite.All
    
    For more information about permission scopes and how they work, see [Microsoft Graph permissions reference](xref:graph.permissions_reference).
    <a name="see-also"></a>
  outro: |
    ## See also
    
    * [Add images and files](xref:graph.onenote_images_files)
    * [Create absolute positioned elements](xref:graph.onenote-abs-pos)  
    * [Extract data](xref:graph.onenote-extract-data)
    * [Use note tags](xref:graph.onenote-note-tags)
    * [Integrate with OneNote](xref:graph.integrate_with_onenote)
    * [OneNote Developer Blog](http://go.microsoft.com/fwlink/?LinkID=390183)
    * [OneNote development questions on Stack Overflow](http://go.microsoft.com/fwlink/?LinkID=390182)
    * [OneNote GitHub repos](http://go.microsoft.com/fwlink/?LinkID=390178)  
    
examples:
  - items:
    - Example request:
        heading: Example request
        intro: |
          This example multipart request creates a page that contains images and an embedded file. The required **Presentation** part contains the input HTML that defines the page. The **imageBlock1** part contains the binary image data, and **fileBlock1** contains the binary file data. Data parts can also contain HTML, in which case Microsoft Graph [renders the HTML as an image](xref:graph.onenote_images_files#add-an-image-using-binary-data) on the OneNote page. 
          POST https://graph.microsoft.com/v1.0/me/onenote/pages
          Authorization: Bearer {token}
          Content-Type: multipart/form-data; boundary=MyPartBoundary198374
          
          --MyPartBoundary198374
          Content-Disposition:form-data; name="Presentation"
          Content-Type:text/html
          
          <!DOCTYPE html>
          <html>
            <head>
              <title>A page with rendered images and an attached file</title>
              <meta name="created" content="2015-07-22T09:00:00-08:00" />
            </head>
            <body>
              <p>Here's an image from an <i>online source</i>:</p>
              <img src="http://..." alt="an image on the page" width="500" />
              <p>Here's an image uploaded as <b>binary data</b>:</p>
              <img src="name:imageBlock1" alt="an image on the page" width="300" />
              <p>Here's a file attachment:</p>
              <object data-attachment="FileName.pdf" data="name:fileBlock1" type="application/pdf" />
            </body>
          </html>
          
          --MyPartBoundary198374
          Content-Disposition:form-data; name="imageBlock1"
          Content-Type:image/jpeg
          
          ... binary image data ...
          
          --MyPartBoundary198374
          Content-Disposition:form-data; name="fileBlock1"
          Content-Type:application/pdf
          
          ... binary file data ...
          
          --MyPartBoundary198374--

          For more examples that show how to create pages that contain images and other files, see [Add images and files](xref:graph.onenote_images_files), our [tutorials](https://docs.microsoft.com/en-us/previous-versions/office/office-365-api/how-to/onenote-tutorial), and our [samples](https://github.com/onenotedev). Also, learn how to [create absolute positioned elements](xref:graph.onenote-abs-pos), [use note tags](xref:graph.onenote-note-tags), and [extract data](xref:graph.onenote-extract-data) for business card captures and online recipe and product listings.
          Microsoft Graph is strict about some formats, such as CRLF newlines in a multipart message body. To reduce the risk of creating malformed payloads, you should use a library to construct multipart messages. 
          If you do receive a 400 status for a malformed payload, check the formatting of newlines and whitespaces, and check for encoding issues. For example, try using `charset=utf-8` (example: `Content-Type: text/html; charset=utf-8`).
          See [requirements and limitations for input HTML](#requirements-and-limitations-for-input-html-in-post-pages-requests) and [size limits for POST requests](xref:graph.onenote_images_files#size-limitations-for-post-pages-requests).
          <a name="request-response-info"></a>
        outro: |
          ## Request and response information for *POST pages* requests
          |Request data|Description|
          |-|-|  -
          |Protocol|All requests use the SSL/TLS HTTPS protocol.|
          |Authorization header|<p>`Bearer {token}`, where `{token}` is a valid OAuth 2.0 access token for your registered app.</p><p>If missing or invalid, the request fails with a 401 status code. See [Authentication and permissions](xref:graph.permissions_reference).</p>|
          |Content-Type header|<p>`text/html` or `application/xhtml+xml` for the HTML content, whether it's sent directly in the message body or in the required "Presentation" part of multipart requests.</p><p>Multipart requests are required when sending binary data, and use the `multipart/form-data; boundary=part-boundary` content type, where `{part-boundary}` is a string that signals the start and end of each data part.</p>|
          |Accept header|`application/json`|
          <br/>
          |Response data|Description|
          |-|-|  -
          |Success code|A 201 HTTP status code.|
          |Response body|A OData representation of the new page in JSON format.|
          |Errors|If the request fails, the API returns errors in the **@api.diagnostics** object in the response body.|
          |Location header|The resource URL for the new page.|
          |X-CorrelationId header|A GUID that uniquely identifies the request. You can use this value along with the value of the Date header when working with Microsoft support to troubleshoot issues.|
          <a name="root-url"></a>
