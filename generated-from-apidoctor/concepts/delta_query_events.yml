### YamlMime:GraphOperation
uid: graph.delta_query_events
metadata:
  content_git_url: https://github.com/microsoftgraph/microsoft-graph-docs/blob/master/concepts/delta_query_events.md
summary:
  heading: "Get incremental changes to events in a calendar view"
  intro: |
    A calendar view is a collection of events in a date/time range from the default calendar (../me/calendarview) 
    or some other calendar of the user's. By using delta query, you can get 
    new, updated, or deleted events in a calendar view. 
    The returned events may include occurrences and exceptions of a recurring series, 
    and single instances. The delta data enables you to maintain 
    and synchronize a local store of a user's events, 
    without having to fetch the entire set of the user's events from the server every time.
    Delta query supports both full synchronization that retrieves all the events in the specified calendar view, 
    and incremental synchronization that retrieves those events that have changed in the calendar view since 
    the last synchronization. Typically, you would do an initial full synchronization, and 
    subsequently, get incremental changes to that calendar view periodically. 
  outro: |
    ## Track event changes in a calendar view
    Delta query for events is specific to a calendar and date/time range that you specify (i.e., a calendar view). To track the changes in multiple calendars, 
    you need to track each calendar individually. 
    Tracking event changes in a calendar view typically is a round of one or more GET requests with 
    the [delta](xref:graph.event_delta) function. The initial GET 
    request is very much like the way you [list a calendarView](https://developer.microsoft.com/en-us/graph/docs/api-reference/v1.0/api/calendar_list_calendarview), 
    except that you include the **delta** function:
    GET /me/calendarView/delta?startDateTime={start_datetime}&endDateTime={end_datetime}

    A GET request with the **delta** function returns either:
    
    * A `nextLink` (that contains a URL with a **delta** function call and a _skipToken_), or 
    * A `deltaLink` (that contains a URL with a **delta** function call and _deltaToken_).
    
    These tokens are [state tokens](delta_query_overview.md#state-tokens) which encode the refs/remotes/microsoftgraph/master
    _startDateTime_ and _endDateTime_ parameters, and any other query parameter 
    in your initial delta query GET request. 
    State tokens are completely opaque to the client. 
    To proceed with a round of change tracking, simply copy and apply the `nextLink` or 
    `deltaLink` URL returned from the last GET 
    request to the next **delta** function call for that same calendar view. A `deltaLink` returned in a response 
    signifies that the current round of change tracking is complete. You can save and use the `deltaLink` URL
    when you begin the next round.
    See the [example](#example-to-synchronize-events-in-a-calendar-view) below to learn how to use these `nextLink` and 
    `deltaLink` URLs.
