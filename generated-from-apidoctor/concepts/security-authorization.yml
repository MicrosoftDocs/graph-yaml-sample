### YamlMime:GraphOperation
uid:graph.security-authorization
metadata:
  content_git_url: https://github.com/microsoftgraph/microsoft-graph-docs/blob/master/concepts/security-authorization.md
summary:
  heading: Authorization and the security API in Microsoft Graph
  intro: |
    Security data accessible via the security API in Microsoft Graph is sensitive and is protected by both permissions and Azure Active Directory (Azure AD) roles.
    The security API supports two types of authorization:
    
    * **Application-level authorization** - There is no signed-in user (for example, a SIEM scenario). The permissions granted to the application determine authorization. 
    * **User delegated authorization** - A user who is a member of the Azure AD tenant is signed in. The user must be a member of an Azure AD Limited Admin role - either Security Reader or Securty Administrator - in addition to the application having been granted the required permissions.
    
    If you're calling the security API from Graph Explorer:
    
    * The Azure AD tenant admin must explicitly grant consent for the requested permissions to the Graph Explorer application.
    * The user must be a member of the Security Reader Limited Admin role in Azure AD (either Security Reader or Security Administrator).
    
    
    If you're calling the security API from a custom or your own application:
    
    * The Azure AD tenant admin must explicitly grant consent to your application. This is required both for application-level authorization and user delegated authorization.
    * If you're using user delegated authorization, the user must be a member of the Security Reader or Security Administrator Limited Admin role in Azure AD.
    
  outro: |
    ## Manage authorization in security API client applications
    Security data provided via the security API in Microsoft Graph is sensitive and must be protected by appropriate authentication and authorization mechanisms. The following table lists the steps to register and create a client application that can access the security API.
    |**Who**|**Action**
    |:-|:-|
    |Application developer or owner|Register the application as an enterprise application.
    |Tenant admin|Grant permissions to the application.
    |Tenant admin|Assign roles to users.
    |Application developer|Sign in as the user and use the application to access the security API.
    Application registration only defines which permissions the application needs in order to run. It does NOT grant these permissions to the application.
    The Azure AD tenant administrator MUST explicitly grant the permissions to the application. This must be done per tenant and must be *performed every time* the application permissions are changed in the application registration portal.
    For example, assume that you have an application, two Azure AD tenants, **T1** and **T2**, and two permissions, **P1** and **P2**. The following is the authorization process:
    
    * The application registers to require permission **P1**.
    * When users in tenant **T1** get an Azure AD token for this application, the token does not contain any permissions.
    * The Azure AD admin of tenant **T1** explicitly grants permissions to the application. When users in tenant **T1** get an Azure AD token for the application, it will contain permission **P1**.
    * When users in tenant **T2** get an Azure AD token for the application, the token does not contain any permissions - because the admin of tenant **T2** did not yet grant permissions to the application. Permission must be granted *per tenant* and *per application*.
    * The application has its registration changed to now require permissions **P1** and **P2**.
    * When users in tenant **T1** get an Azure AD token for the application, it only contains permission **P1**. Permissions granted to an application are recorded as snapshots of what was granted - they *do not change automatically* after the application registration (permission) changes.
    * The admin of tenant **T2** grants permissions **P1** and **P2** to the application. Now, when users in tenant **T2** get an Azure AD token for the application, the token will contain permissions **P1** and **P2**.
    
    
    
    * To make the application work again in tenant **T1**, the admin of tenant **T1** must explicitly grant permissions **P1** and **P2** to the application.
    
