### YamlMime:GraphOperation
uid: graph.open_onenote_client
metadata:
  content_git_url: https://github.com/microsoftgraph/microsoft-graph-docs/blob/master/concepts/open_onenote_client.md
summary:
  heading: "Open the OneNote client"
  intro: |
    You can use the **links** property of a page or notebook to open a OneNote application to a particular page or notebook. 
    The **links** property is a JSON object that contains two URLs. The URLs will open the page or notebook in the OneNote client application or in OneNote Online.
    { 
        "links": {
            "oneNoteClientUrl": {
                "href": "onenote:https://..."
            },
            "oneNoteWebUrl": {
                "href": "https://..."
            }
        }
    }

    
    * **oneNoteClientUrl** 
        * Opens the OneNote client if it is already installed on the device. This URL includes the *onenote* prefix.
        * Opens the language-specific version if one is installed on the device. Otherwise, uses the platform language setting.
    * **oneNoteWebUrl** 
        * Opens OneNote Online if the default browser on the device supports it. 
        * Uses the browser language setting.
    
    The OneNote API returns the **links** property in the HTTP response for the following operations:
    
    * Create a page by sending a [`POST pages`](xref:graph.section_post_pages) request.
    * Create a notebook by sending a [`POST notebooks`](xref:graph.onenote_post_notebooks) request.
    * Get page metadata by sending a [`GET pages`](xref:graph.page_get) or [`GET pages/{id}`](xref:graph.page_get) request.
    * Get notebook metadata by sending a [`GET notebooks`](xref:graph.notebook_get) or [`GET notebooks/{id}`](xref:graph.notebook_get) request.
    
    The following examples show how to check the status code of the response, parse the JSON to extract the URLs, and then open the OneNote client.
examples:
  - items:
    - request:
      heading: "iOS example"
      intro: |
        The following example gets the OneNote client URLs from the JSON response. It uses the AFNetworking library (http://afnetworking.com/) to extract the two URLs. In the example, `created` is a pointer to the **ONSCPSStandardResponse** object used to store the response values, and `responseObject` holds the parsed JSON.
            /* Import the JSON library */
            #import "AFURLRequestSerialization.h"
        
            - (void)connectionDidFinishLoading:(NSURLConnection *)connection {
                    if(delegate) {
                          int status = [returnResponse statusCode];
                          ONSCPSStandardResponse *standardResponse = nil;
                          if (status == 201) {
                                ONSCPSCreateSuccessResponse *created = 
                                      [[ONSCPSCreateSuccessResponse alloc] init];
                                created.httpStatusCode = status;
                                NSError *jsonError;
                                NSDictionary *responseObject = 
                                      [NSJSONSerialization JSONObjectWithData:returnData options:0 error:&jsonError];
                                if(responseObject && !jsonError) {
                                      created.oneNoteClientUrl = ((NSDictionary *)
                                            ((NSDictionary *)responseObject[@"links"])[@"oneNoteClientUrl"])[@"href"];
                                      created.oneNoteWebUrl = ((NSDictionary *)
                                            ((NSDictionary *)responseObject[@"links"])[@"oneNoteWebUrl"])[@"href"];
                                }
                          standardResponse = created;
                          }
                          else {
                                ONSCPSStandardErrorResponse *error = [[ONSCPSStandardErrorResponse alloc] init];
                                error.httpStatusCode = status;
                                error.message = [[NSString alloc] initWithData:returnData 
                                      encoding:NSUTF8StringEncoding];
                                standardResponse = error;
                          }
                          // Send the response back to the client.
                          if (standardResponse) {
                                [delegate exampleServiceActionDidCompleteWithResponse: standardResponse];
                          }
                    }
              }

        <br/>
        After you parse the URLs from the response, you can open OneNote by using the following code. Use `oneNoteClientUrl` to open the installed OneNote client or `oneNoteWebURL` to open OneNote Online.
        NSURL *url = [NSURL URLWithString:standardResponse.oneNoteWebUrl];
        [[UIApplication sharedApplication] openURL:url];

    - request:
      heading: "Android example"
      intro: |
        First, check for the success status code, and then parse the JSON. The example assumes a POST request was sent, so it checks for a `201 Created` status code. If you made a `GET` request, check for a `200` status code instead.
        public ApiResponse getResponse() throws Exception {
            /* Get the HTTP response code and message from the connection object */
            int responseCode = mUrlConnection.getResponseCode();
            String responseMessage = mUrlConnection.getResponseMessage();
            String responseBody = null;
        
            /* Get the response if the new page was created successfully. */
            if ( responseCode == 201) {
                InputStream is = mUrlConnection.getInputStream();
        
                /* Verify that this byte array is big enough. */
                byte[] b1 = new byte[1024];
                StringBuffer buffer = new StringBuffer();
        
                /* Copy the body of the response into the new string. */
                /* Make sure the buffer is big enough. */
                while ( is.read(b1) != -1)
                    buffer.append(new String(b1));
        
              /* When the returned data is complete, close the connection 
                 and convert the byte array into a string. */
                mUrlConnection.disconnect();
                responseBody =  buffer.toString();
            }
        
            /* Create a new JSON object, and an object to hold the response URLs. */
            JSONObject responseObject = null;
            ApiResponse response = new ApiResponse();
            try {
        
                /* Store and verify the HTTP response code. */
                response.setResponseCode(responseCode);
                response.setResponseMessage(responseMessage);
                if ( responseCode == 201) {
        
                    /* Retrieve the two URLs from the links property. */
                    responseObject = new JSONObject(responseBody);
                    String clientUrl = responseObject.getJSONObject(
                        "links").getJSONObject("oneNoteClientUrl").getString("href");
                    String webUrl = responseObject.getJSONObject(
                        "links").getJSONObject("oneNoteWebUrl").getString("href");
                    response.setOneNoteClientUrl(clientUrl);
                    response.setOneNoteWebUrl(webUrl);
                }
            } catch (JSONException ex) {
        
                /* If the JSON was malformed or incomplete... */
                String msg = ex.getMessage();
                msg = msg;
            }
            return response;
        }

        <br/>
        Using the response properties, your app can open OneNote Online, as shown in the following example.
        if (response.getResponseCode() == 201) {
            Uri uriUrl = Uri.parse(response.getOneNoteWebUrl);  
            Intent launchBrowser = new Intent(Intent.ACTION_VIEW, uriUrl); 
            startActivity(launchBrowser);
        }

        <br/>
        Or your app can open the OneNote client on an Android device. When using the `oneNoteClientUrl` property, you must surround the GUID strings with braces `{ }` before starting the Intent. The following example shows how to do that.
        if (response.getResponseCode() == 201) {
        
            // Get the URL from the OneNote API JSON response.
            String onenoteClientUrl = obtainClientLinkFromJSONResponse();
            String androidClientUrl = 
                onenoteClientUrl.replaceAll(
                    "=([0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12})&",
                    "={$1}&");
        
            // Open the URL: Open the newly created OneNote page.
            Uri uriUrl = Uri.parse(androidClientUrl);  
            Intent launchBrowser = new Intent(Intent.ACTION_VIEW, uriUrl); 
            startActivity(launchBrowser);
        }

