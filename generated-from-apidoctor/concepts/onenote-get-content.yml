### YamlMime:GraphOperation
uid: graph.onenote-get-content
metadata:
  content_git_url: https://github.com/microsoftgraph/microsoft-graph-docs/blob/master/concepts/onenote-get-content.md
summary:
  heading: Get OneNote content and structure with Microsoft Graph
  intro: |
    **Applies to**: Consumer notebooks on OneDrive | Enterprise notebooks on Office 365
    To get OneNote content and structure, you send a GET request to the target endpoint. For example:
    `GET ../onenote/pages/{id}`
    If the request is successful, Microsoft Graph returns a 200 HTTP status code and the entities or content that you requested. OneNote entities are returned as JSON objects that conform to the OData version 4.0 specification.
    By using query string options, you can filter your queries and improve performance.
    <a name="request-uri"></a>
  outro: |
    ## Construct the request URI
    To construct the request URI, start with the service root URL:
    `https://graph.microsoft.com/v1.0/me/onenote`
    <br/>
    Then append the endpoint of the resource you want to retrieve. ([Resource paths](#resource-paths-for-get-requests) are shown in the next section.)
    Your full request URI will look like one of these examples:
    
    * `https://graph.microsoft.com/v1.0/me/onenote/notebooks/{id}/sections`
    * `https://graph.microsoft.com/v1.0/me/onenote/notes/pages`
    * `https://graph.microsoft.com/v1.0/me/onenote/pages?select=title,self`
    
    
    <a name="resource-paths"></a>
examples:
  - items:
    - Example:
        heading: Example
        intro: |
          `GET ../sections/{section-id}/pages?pagelevel=true`
          <a name="get-page"></a> 
        outro: |
          ### Page entity
          Get the metadata for a specific page. 
          `../pages/{page-id}[?select,expand,pagelevel]` 
          <br/>
          Pages can expand the **parentNotebook** and **parentSection** properties.
          The default query expands the parent section and selects the section's `id`, `name`, and `self` properties.
          Use **pagelevel** to return the indentation level of the page and its order within its parent section. 
    - Example:
        heading: Example
        intro: |
          `GET ../pages/{page-id}?pagelevel=true`
          <a name="get-page-preview"></a> 
        outro: |
          ### Page preview
          Get text and image preview content for a page.
          `../pages/{page-id}/preview`
          <br/>
          The JSON response contains the preview content, which you can use to help users identify what's in the page.
          {
            "@odata.context":"https://www.onenote.com/api/v1.0/$metadata#Microsoft.OneNote.Api.PagePreview",
            "previewText":"text-snippet",
            "links":{
              "previewImageUrl":{
                "href":"https://www.onenote.com/api/v1.0/resources/{id}/content?publicAuth=true&mimeType=image/png"
              }
            }
          }

          The **previewText** property contains a text snippet from the page. Microsoft Graph returns complete phrases, up to a maximum of 300 characters. 
          If the page has an image that can be used to build a preview UI, the **href** property in the **previewImageUrl** object contains a link to a public, pre-authenticated [image resource](#image-or-other-file-resource). You can use this link in HTML. Otherwise, **href** returns null.
    - Example:
        heading: Example
        intro: |
          `<img src="https://www.onenote.com/api/v1.0/resources/{id}/content?publicAuth=true&mimeType=image/png" />`
          <a name="get-page-content"></a> 
        outro: |
          ### Page HTML content
          Get the HTML content of a page.
          `../pages/{page-id}/content[?includeIDs,preAuthenticated]`
          (*learn more about [returned HTML content](xref:graph.onenote_input_output_html)*) 
          <br/>
          Use the **includeIDs=true** query string option to get generated IDs used to [update the page](xref:graph.onenote_update_page).
          Use the **preAuthenticated=true** query string option to get public URLs to the [image resources](#image-or-other-file-resource) that are on the page. The public URLs are valid for one hour. 
          <a name="get-sections"></a>
    - Example:
        heading: Example
        intro: |
          <img 
              src="https://www.onenote.com/api/v1.0/me/notes/resources/{image-id}/$value"  
              data-src-type="image/png"
              data-fullres-src="https://www.onenote.com/api/v1.0/resources/{image-id}/$value"  
              data-fullres-src-type="image/png" ... />

          And an **object** tag includes the endpoint for the file resource in the **data** attribute. 
    - Example:
        heading: Example
        intro: |
          <object
              data="http://www.onenote.com/api/v1.0/me/notes/resources/{file-id}/$value"
              data-attachment="fileName.pdf" 
              type="application/pdf" ... />

          To get public, pre-authenticated URLs to the image resources on a page, include `preAuthenticated=true` in the query string when you [retrieve the page content](#page-html-content) (**example:**  `GET ../pages/{page-id}/content?preAuthenticated=true`). The public URLs that are returned in the [output HTML](xref:graph.onenote_input_output_html#output-html-examples-for-images) are valid for one hour. Without this flag, retrieved images won't render directly in a browser because they are private and require authorization to retrieve them, like the rest of the page contents. 
          
          When you get a file resource, you don't need to include an **Accept** content type in the request.
          For more information about GET requests, see the following resources in the Microsoft Graph API REST reference:
          
          * [GET Pages](xref:graph.page_get)
          * [GET Sections](xref:graph.section_get)
          * [GET SectionGroups](xref:graph.sectiongroup_get)
          * [GET Notebooks](xref:graph.notebook_get) 
          
          <a name="example"></a>
    - Example GET requests:
        heading: Example GET requests
        intro: |
          You can query for OneNote entities and search page content to get just the information you need. The following examples show some ways you can use [supported query string options](#supported-odata-query-string-options) in GET requests to Microsoft Graph. 
          **Remember:**
          
          * All GET requests start with the [service root URL](../api-reference/v1.0/resources/onenote-api-overview.md#root-url). <br/><br/>**Examples**: `https://www.onenote.com/api/v1.0/me/notes` and `https://www.onenote.com/api/v1.0/myOrganization/siteCollections/{id}/sites/{id}/notes/`
          * Spaces in the URL query string must use %20 encoding.<br/><br/>**Example**: `filter=title%20eq%20'biology'`
          * Property names and OData string comparisons are case-sensitive. We recommend using the OData **tolower** function for string comparisons.<br/><br/>**Example**: `filter=tolower(name) eq 'spring'`
          
        outro: |
          ### search & filter
          Get all pages that contain the term *recipe* that were created by a specific app (`search` is available for consumer notebooks only).
          [GET] ../pages?search=recipe&filter=createdByAppId eq 'WLID-000000004C12821A'

    - Example:
        heading: Example
        intro: |
          `../sections?filter=createdTime ge 2015-01-01&select=name,pagesUrl&orderby=lastModifiedTime desc` 
          Property names are case-sensitive in query expressions.
          For the list of properties and property types, see the following resources in the Microsoft Graph API REST reference:
          
          * [GET Pages](xref:graph.page_get)
          * [GET Sections](xref:graph.section_get)
          * [GET SectionGroups](xref:graph.sectiongroup_get)
          * [GET Notebooks](xref:graph.notebook_get) 
          
          The **expand** query string option can be used with the following navigation properties:
          
          * Pages: **parentNotebook**, **parentSection**
          * Sections: **parentNotebook**, **parentSectionGroup**
          * Section groups: **sections**, **sectionGroups**, **parentNotebook**, **parentSectionGroup**
          * Notebooks: **sections**, **sectionGroups**
          
          <a name="request-response-info"></a>
        outro: |
          ## Request and response information for *GET* requests
          |Request data|Description|
          |-|-|  -
          |Protocol|All requests use the SSL/TLS HTTPS protocol.|
          |Authorization header|<p>`Bearer {token}`, where `{token}` is a valid OAuth 2.0 access token for your registered app.</p><p>If missing or invalid, the request fails with a 401 status code. See [Authentication and permissions](xref:graph.permissions_reference).</p>|
          |Accept header|<p> `application/json` for OneNote entities and entity sets</p><p> `text/html` for page content</p>|
          <br/>
          |Response data|Description|
          |-|-|  -
          |Success code|A 200 HTTP status code.|
          |Response body|An OData representation of the entity or entity set in JSON format, the page HTML, or file resource binary data.|
          |Errors|If the request fails, the API returns [errors](xref:graph.onenote_error_codes) in the **@api.diagnostics** object in the response body.|
          |X-CorrelationId header|A GUID that uniquely identifies the request. You can use this value along with the value of the Date header when working with Microsoft support to troubleshoot issues.|
          <a name="root-url"></a>
