### YamlMime:GraphOperation
uid: graph.message_delta
metadata:
  content_git_url: https://github.com/microsoftgraph/microsoft-graph-docs/blob/master/api-reference/v1.0/api/message_delta.md
summary:
  heading: "message: delta"
  intro: |
    Get a set of messages that have been added, deleted, or updated in a specified folder.
    A **delta** function call for messages in a folder is similar to a GET request, except that by appropriately 
    applying [state tokens](../../../concepts/delta_query_overview.md) in one or more of these calls, you can [query for incremental changes in the messages in 
    that folder](../../../concepts/delta_query_messages.md). This allows you to maintain and synchronize a local store of a user's messages without 
    having to fetch the entire set of messages from the server every time.  
permissions:
  heading: "Permissions"
  intro: |
    One of the following permissions is required to call this API. To learn more, including how to choose permissions, see [Permissions](../../../concepts/permissions_reference.md).
  list:
  - resource: "Delegated (work or school account)"
    permission: "Mail.Read, Mail.ReadWrite"
  - resource: "Delegated (personal Microsoft account)"
    permission: "Mail.Read, Mail.ReadWrite"
  - resource: "Application"
    permission: "Mail.Read, Mail.ReadWrite"
httpRequest:
  heading: "HTTP request"
  samples:
  - sampleCode: |
      ```http
      GET /me/mailFolders/{id}/messages/delta
      GET /users/{id}/mailFolders/{id}/messages/delta
      ```
      
queryParameters:
  heading: "Query parameters"
  intro: |
    Tracking changes in messages incurs a round of one or more **delta** function calls. If you use any query parameter 
    (other than `$deltatoken` and `$skiptoken`), you must specify 
    it in the initial **delta** request. Microsoft Graph automatically encodes any specified parameters 
    into the token portion of the `nextLink` or `deltaLink` URL provided in the response. 
    You only need to specify any desired query parameters once upfront. 
    In subsequent requests, simply copy and apply the `nextLink` or `deltaLink` URL from the previous response, as that URL already 
    includes the encoded, desired parameters.
  list:
  - name: "$deltatoken"
    value: "String"
    description: "A state token returned in the deltaLink URL of the previous delta function call for the same message collection, indicating the completion of that round of change tracking. Save and apply the entire deltaLink URL including this token in the first request of the next round of change tracking for that collection."
  - name: "$skiptoken"
    value: "String"
    description: "A state token returned in the nextLink URL of the previous delta function call, indicating there are further changes to be tracked in the same message collection."
  outro: |
    #### OData query parameters
    
    * You can use a `$select` query parameter as in any GET request to specify only the properties your need for best performance. The 
    _id_ property is always returned. 
    * Delta query support `$select`, `$top`, and `$expand` for messages. 
    * There is limited support for `$filter` and `$orderby`:
        * The only supported `$filter` expresssions are `$filter=receivedDateTime+ge+{value}` or `$filter=receivedDateTime+gt+{value}`.
        * The only supported `$orderby` expression is `$orderby=receivedDateTime+desc`. If you do not include an `$orderby` expression, the return order is not guaranteed.
    * There is no support for `$search`.
    
requestHeaders:
  heading: "Request headers"
  list:
  - name: "Authorization"
    value: "String"
    description: "Bearer {token}. Required."
  - name: "Content-Type"
    value: "String"
    description: "application/json. Required."
  - name: "Prefer"
    value: "String"
    description: "odata.maxpagesize={x}. Optional."
response:
  heading: "Response"
  intro: |
    If successful, this method returns a `200 OK` response code and [message](xref:graph.message) collection object in the response body.
