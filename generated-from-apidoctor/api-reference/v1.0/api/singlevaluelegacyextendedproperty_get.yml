### YamlMime:GraphOperation
uid: graph.singlevaluelegacyextendedproperty_get
metadata:
  content_git_url: https://github.com/microsoftgraph/microsoft-graph-docs/blob/master/api-reference/v1.0/api/singlevaluelegacyextendedproperty_get.md
summary:
  heading: "Get singleValueLegacyExtendedProperty"
  intro: |
    You can get a single resource instance expanded with a specific extended property, or a collection of resource instances
    that include extended properties matching a filter.
    Using the query parameter `$expand` allows you to get the specified resource instance expanded with a specific extended 
    property. Use a `$filter` and `eq` operator on the **id** property to specify the extended property. This is currently the only way to get the [singleValueLegacyExtendedProperty](xref:graph.singleValueLegacyExtendedProperty) object that represents an extended property. 
    To get resource instances that have certain extended properties, use the `$filter` query parameter and apply an `eq` operator 
    on the **id** property. In addition, for numeric extended properties, apply one of the following operators on the **value** property: 
    `eq`, `ne`,`ge`, `gt`, `le`, or `lt`. For string-typed extended properties, apply a `contains`, `startswith`, `eq`, or `ne` operator on **value**.
    The filter is applied to all instances of the resource in the signed-in user's mailbox. 
    Filtering the string name (`Name`) in the **id** of an extended property is case-sensitive. Filtering the **value** property of an extended 
    property is case-insensitive.
    The following user resources are supported:
    
    * [message](xref:graph.message)
    * [mailFolder](xref:graph.mailfolder)
    * [event](xref:graph.event)
    * [calendar](xref:graph.calendar)
    * [contact](xref:graph.contact)
    * [contactFolder](xref:graph.contactfolder) 
    
    As well as the following group resources:
    
    * group [event](xref:graph.event)
    * group [calendar](xref:graph.calendar)
    * group [post](xref:graph.post) 
    
    See [Extended properties overview](xref:graph.extended-properties-overview) for more information about when to use 
    open extensions or extended properties, and how to specify extended properties.
permissions:
  heading: "Permissions"
  intro: |
    One of the following permissions is required to call this API, depending on the resource you're
    getting. To learn more, including how to choose permissions, see [Permissions](../../../concepts/permissions_reference.md).
    
    * Mail.Read
    * Calendars.Read
    * Contacts.Read
    * Group.Read.All 
    
httpRequest:
  heading: "HTTP request"
  outro: |
    #### GET a resource instance expanded with an extended property that matches a filter
    Get a resource instance expanded with the extended property which matches a filter on the 
    **id** property. Make sure you apply 
    [URL encoding](http://www.w3schools.com/tags/ref_urlencode.asp) to the space characters in the filter string.
    Get a **message** instance:
    
    ```http
    GET /me/messages/{id}?$expand=singleValueExtendedProperties($filter=id eq '{id_value}')
    GET /users/{id|userPrincipalName}/messages/{id}?$expand=singleValueExtendedProperties($filter=id eq '{id_value}')
    GET /me/mailFolders/{id}/messages/{id}?$expand=singleValueExtendedProperties($filter=id eq '{id_value}')
    ```
    
    Get a **mailFolder** instance:
    
    ```http
    GET /me/mailFolders/{id}?$expand=singleValueExtendedProperties($filter=id eq '{id_value}')
    GET /users/{id|userPrincipalName}/mailFolders/{id}?$expand=singleValueExtendedProperties($filter=id eq '{id_value}')
    ```
    
    Get an **event** instance:
    
    ```http
    GET /me/events/{id}?$expand=singleValueExtendedProperties($filter=id eq '{id_value}')
    GET /users/{id|userPrincipalName}/events/{id}?$expand=singleValueExtendedProperties($filter=id eq '{id_value}')
    ```
    
    Get a **calendar** instance:
    
    ```http
    GET /me/calendars/{id}?$expand=singleValueExtendedProperties($filter=id eq '{id_value}')
    GET /users/{id|userPrincipalName}/calendars/{id}?$expand=singleValueExtendedProperties($filter=id eq '{id_value}')
    ```
    
    Get a **contact** instance:
    
    ```http
    GET /me/contacts/{id}?$expand=singleValueExtendedProperties($filter=id eq '{id_value}')
    GET /users/{id|userPrincipalName}/contacts/{id}?$expand=singleValueExtendedProperties($filter=id eq '{id_value}')
    GET /me/contactFolders/{id}/contacts/{id}?$expand=singleValueExtendedProperties($filter=id eq '{id_value}')
    GET /users/{id|userPrincipalName}/contactFolders/{id}/contacts/{id}?$expand=singleValueExtendedProperties($filter=id eq '{id_value}')
    ```
    
    Get a **contactFolder** instance:
    
    ```http
    GET /me/contactfolders/{id}?$expand=singleValueExtendedProperties($filter=id eq '{id_value}')
    GET /users/{id|userPrincipalName}/contactFolders/{id}?$expand=singleValueExtendedProperties($filter=id eq '{id_value}')
    ```
    
    Get a group **event** instance:
    
    ```http
    GET /groups/{id}/events/{id}?$expand=singleValueExtendedProperties($filter=id eq '{id_value}')
    ```
    
    Get a group **post** instance:
    
    ```http
    GET /groups/{id}/threads/{id}/posts/{id}?$expand=singleValueExtendedProperties($filter=id eq '{id_value}')
    GET /groups/{id}/conversations/{id}/threads/{id}/posts/{id}?$expand=singleValueExtendedProperties($filter=id eq '{id_value}')
    ```
    
parameters:
  heading: "Parameters"
  list:
  - name: "id_value"
    value: "String"
    description: "The ID of the extended property to match. It must follow one of the supported formats. See Outlook extended properties overview for more information. Required."
  - name: "property_value"
    value: "String"
    description: "The value of the extended property to match. Required where listed in the HTTP request section above. If {property_value} is not a string, make sure you explicitly cast ep/value to the appropriate Edm data type when comparing it with {property_value}. See request 4 below for examples."
requestHeaders:
  heading: "Request headers"
  list:
  - name: "Authorization"
    value: ""
    description: "Bearer {token}. Required."
requestBody:
  heading: "Request body"
  intro: |
    Do not supply a request body for this method.
response:
  heading: "Response"
  intro: |
    If successful, this method returns a `200 OK` response code.
  outro: |
    #### GET resource instance expanded with a matching extended property
    The response body includes an object representing the requested resource instance, expanded with the matching [singleValueLegacyExtendedProperty](xref:graph.singlevaluelegacyextendedproperty) object.
examples:
- items:
  - request:
      heading: "Request 1"
      intro: |
        The first example gets and expands the specified message by including a single-value extended property. The filter returns the 
        extended property that has its **id** matching the string `String {66f5a359-4659-4830-9070-00047ec6ac6e} Name Color`
        (with URL encoding removed here for ease of reading).
      sampleCode: |
        ```http
        GET https://graph.microsoft.com/v1.0/me/messages/AAMkAGE1M2_bs88AACHsLqWAAA=?$expand=singleValueExtendedProperties($filter=id%20eq%20'String%20{66f5a359-4659-4830-9070-00047ec6ac6e}%20Name%20Color')
        ```
        
  - request:
      heading: "Response 1"
      intro: |
        The response body includes all the properties of the specified message and extended property returned from the filter.
        Note: The **message** object shown here is truncated for brevity. All of the properties will be returned from an actual call.
    response:
      heading: "Response 1"
      sampleCode: |
        ```http
        HTTP/1.1 200 OK
        Content-type: application/json
        
        {
            "@odata.context": "https://graph.microsoft.com/v1.0/$metadata#Me/messages/$entity",
            "@odata.id": "https://graph.microsoft.com/v1.0/users('ddfcd489-628b-40d7-b48b-57002df800e5@1717622f-1d94-4d0c-9d74-709fad664b77')/messages('AAMkAGE1M2_bs88AACHsLqWAAA=')",
            "@odata.etag": "W/\"CQAAABYAAACY4MQpaFz9SbqUDe4+bs88AACbyS4H\"",
            "id": "AAMkAGE1M2_bs88AACHsLqWAAA=",
            "subject": "RE: Talk about emergency prep",
            "sender": {
                "emailAddress": {
                    "name": "Christine Irwin",
                    "address": "christine@contoso.com"
                }
            },
            "from": null,
            "toRecipients": [
                {
                    "emailAddress": {
                        "name": "Christine Irwin",
                        "address": "christine@contoso.com"
                    }
                }
            ],
            "singleValueExtendedProperties@odata.context": "https://graph.microsoft.com/v1.0/$metadata#Me/messages('AAMkAGE1M2_bs88AACHsLqWAAA%3D')/singleValueExtendedProperties",
            "singleValueExtendedProperties": [
                {
                    "id": "String {66f5a359-4659-4830-9070-00047ec6ac6e} Name Color",
                    "value": "Green"
                }
            ]
        }
        ```
        
  - request:
      heading: "Request 2"
      intro: |
        The second example gets messages that have the string-typed single-value extended property specified in the filter. The filter 
        looks for the extended property that has:
        
        * Its **id** equal to the string `String {66f5a359-4659-4830-9070-00047ec6ac6e} Name Color`
        (with URL encoding removed here for ease of reading).
        * Its **value** equal to the string `Green`.
        
      sampleCode: |
        ```http
        GET https://graph.microsoft.com/v1.0/me/messages?$filter=singleValueExtendedProperties%2FAny(ep%3A%20ep%2Fid%20eq%20'String%20{66f5a359-4659-4830-9070-00047ec6ac6e}%20Name%20Color'%20and%20ep%2Fvalue%20eq%20'Green')
        ```
        
  - request:
      heading: "Response 2"
      intro: |
        A successful response is indicated by an `HTTP 200 OK` response code, and the response body includes all 
        the properties of the messages that have the extended property matching the filter. The response body is
        similar to the response from [getting a message collection](xref:graph.user_list_messages). The response does not 
        include the matching extended property.
  - request:
      heading: "Request 3"
      intro: |
        The third example gets messages that have the string-typed single-value extended property specified in the filter. The filter 
        looks for the extended property that has:
        
        * Its **id** equal to the string `String {66f5a359-4659-4830-9070-00047ec6ac6e} Name Color`
        (with URL encoding removed here for ease of reading).
        * Its **value** containing the string `green`. 
        
      sampleCode: |
        ```http
        GET https://graph.microsoft.com/v1.0/Me/messages?$filter=singleValueExtendedProperties/any(ep:ep/Id eq 'String {66f5a359-4659-4830-9070-00047ec6ac6e} Name Color' and contains(ep/Value, 'green'))
        ```
        
  - request:
      heading: "Response 3"
      intro: |
        A successful response is indicated by an `HTTP 200 OK` response code, and the response body includes all 
        the properties of the messages that have the extended property matching the filter. For example, a message that has
        a single-value extended property with the **id** equal to the string `String {66f5a359-4659-4830-9070-00047ec6ac6e} Name Color`, and 
        the **value** `Light green`, would match the filter and be included in the response.
        The response body is similar to the response from [getting a message collection](xref:graph.user_list_messages). The response does not 
        include the matching extended property.
  - request:
      heading: "Request 4"
      intro: |
        The next 2 examples show how to get messages that have non-string typed single-value extended properties. For ease of reading, they do not 
        include the necessary URL encoding.
        The following example shows a filter that looks for the extended property that has:
        
        * Its **id** matching the string `CLSID {00062008-0000-0000-C000-000000000046} Name ConnectorSenderGuid`.
        * Its **value** being the GUID `b9cf8971-7d55-4b73-9ffa-a584611b600b`. To compare the property value with a GUID, cast `ep/value` to `Edm.Guid`.
        
      sampleCode: |
        ```http
        GET https://graph.microsoft.com/v1.0/me/messages?$filter=singleValueExtendedProperties/any(ep:ep/id eq 'CLSID {00062008-0000-0000-C000-000000000046} Name ConnectorSenderGuid' and cast(ep/value, Edm.Guid) eq (b9cf8971-7d55-4b73-9ffa-a584611b600b))
        ```
        
      outro: |
        The next example shows a filter that looks for the extended property that has:
        
        * Its **id** matching the string `Integer {66f5a359-4659-4830-9070-00047ec6ac6e} Name Pallete`.
        * Its **value** equal to the integer 12. To compare the property value with an integer, cast `ep/value` to `Edm.Int32`.
        
        
        ```http
        GET https://graph.microsoft.com/v1.0/me/messages?$filter=singleValueExtendedProperties/any(ep:ep/id eq 'Integer {66f5a359-4659-4830-9070-00047ec6ac6e} Name Pallete' and cast(ep/value, Edm.Int32) eq 12)
        ```
        
  - request:
      heading: "Response 4"
      intro: |
        For each of the preceding 2 examples, a successful response is indicated by an `HTTP 200 OK` response code, and the response body includes all 
        the properties of the messages that have the extended property matching the corresponding filter. The response body is
        similar to the response from [getting a message collection](xref:graph.user_list_messages). The response does not 
        include the matching extended property.
