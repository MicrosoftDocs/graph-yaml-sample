### YamlMime:GraphOperation
uid: graph.mailfolder_update
metadata:
  content_git_url: https://github.com/microsoftgraph/microsoft-graph-docs/blob/master/api-reference/v1.0/api/mailfolder_update.md
summary:
  heading: "Update mailfolder"
  intro: |
    Update the properties of mailfolder object.
permissions:
  heading: "Permissions"
  intro: |
    One of the following permissions is required to call this API. To learn more, including how to choose permissions, see [Permissions](../../../concepts/permissions_reference.md).
  list:
  - resource: "Delegated (work or school account)"
    permission: "Mail.ReadWrite"
  - resource: "Delegated (personal Microsoft account)"
    permission: "Mail.ReadWrite"
  - resource: "Application"
    permission: "Mail.ReadWrite"
httpRequest:
  heading: "HTTP request"
  samples:
  - sampleCode: |
      ```http
      PATCH /me/mailFolders/{id}
      PATCH /users/{id | userPrincipalName}/mailFolders/{id}
      ```
      
requestHeaders:
  heading: "Request headers"
  list:
  - name: "Authorization"
    value: "String"
    description: ""
  - name: "Content-Type"
    value: "String"
    description: ""
requestBody:
  heading: "Request body"
  intro: |
    In the request body, supply the values for relevant fields that should be updated. Existing properties that are not included in the request body will maintain their previous values or be recalculated based on changes to other property values. For best performance you shouldn't include existing values that haven't changed.
    |Property|Type|Description
    |:-|:-|:-|
    |displayName|String|The mailFolder's display name.
response:
  heading: "Response"
  intro: |
    If successful, this method returns a `200 OK` response code and updated [mailFolder](xref:graph.mailfolder) object in the response body.
examples:
- items:
  - request:
      heading: "Request"
      intro: |
        Here is an example of the request.
      sampleCode: |
        ```http
        PATCH https://graph.microsoft.com/v1.0/me/mailFolders/{id}
        Content-type: application/json
        Content-length: 159
        
        {
          "displayName": "displayName-value",
        }
        ```
        
    response:
      heading: "Response"
      intro: |
        Here is an example of the response. Note: The response object shown here may be truncated for brevity. All of the properties will be returned from an actual call.
      sampleCode: |
        ```http
        HTTP/1.1 200 OK
        Content-type: application/json
        Content-length: 179
        
        {
          "displayName": "displayName-value",
          "parentFolderId": "parentFolderId-value",
          "childFolderCount": 99,
          "unreadItemCount": 99,
          "totalItemCount": 99,
          "id": "id-value"
        }
        ```
        
