### YamlMime:GraphOperation
uid: graph.attachment_get
metadata:
  content_git_url: https://github.com/microsoftgraph/microsoft-graph-docs/blob/master/api-reference/v1.0/api/attachment_get.md
summary:
  heading: "Get attachment"
  intro: |
    Read the properties and relationships of an attachment, attached to an [event](xref:graph.event), 
    [message](xref:graph.message), or [post](xref:graph.post). 
    An attachment can be one of the following types:
    
    * A file ([fileAttachment](xref:graph.fileattachment) resource).
    * An item (contact, event or message, represented by an [itemAttachment](xref:graph.itemattachment) resource). You can use `$expand` to further get the properties of that item. See an [example](#request-2) below.
    * A link to a file ([referenceAttachment](xref:graph.referenceAttachment) resource).
    
    All these types of attachment resources are derived from the [attachment](xref:graph.attachment)
    resource. 
permissions:
  heading: "Permissions"
  intro: |
    One of the following permissions is required to call this API. To learn more, including how to choose permissions, see [Permissions](xref:graph.permissions_reference).
    
    * If accessing attachments in messages: Mail.Read.
    * If accessing attachments in events: Calendars.Read.
    * If accessing attachments in group posts: Group.Read.All.
    
httpRequest:
  heading: "HTTP request"
  samples:
  intro: |
    Attachments for an [event](xref:graph.event) in the user's default [calendar](xref:graph.calendar).
  - sampleCode: |
    ```http
    GET /me/events/{id}/attachments/{id}
    GET /users/{id | userPrincipalName}/events/{id}/attachments/{id}
    
    GET /me/calendar/{id}/events/{id}/attachments/{id}
    GET /users/{id | userPrincipalName}/calendar/events/{id}/attachments/{id}
    ```
    
  outro: |
    Attachments for an [event](xref:graph.event) in a [calendar](xref:graph.calendar) belonging to the user's default [calendarGroup](xref:graph.calendargroup).
    
    ```http
    GET /me/calendars/{id}/events/{id}/attachments/{id}
    GET /users/{id | userPrincipalName}/calendars/{id}/events/{id}/attachments/{id}
    
    GET /me/calendargroup/calendars/{id}/events/{id}/attachments/{id}
    GET /users/{id | userPrincipalName}/calendargroup/calendars/{id}/events/{id}/attachments/{id}
    ```
    
    Attachments for an [event](xref:graph.event) in a [calendar](xref:graph.calendar) belonging to a user's [calendarGroup](xref:graph.calendargroup).
    
    ```http
    GET /me/calendargroups/{id}/calendars/{id}/events/{id}/attachments/{id}
    GET /users/{id | userPrincipalName}/calendargroups/{id}/calendars/{id}/events/{id}/attachments/{id}
    ```
    
    Attachments for a [message](xref:graph.message) in a user's mailbox.
    
    ```http
    GET /me/messages/{id}/attachments/{id}
    GET /users/{id | userPrincipalName}/messages/{id}/attachments/{id}
    ```
    
    Attachments for a [message](xref:graph.message) contained in a top level [mailFolder](xref:graph.mailfolder) in a user's mailbox.
    
    ```http
    GET /me/mailFolders/{id}/messages/{id}/attachments/{id}
    GET /users/{id | userPrincipalName}/mailFolders/{id}/messages/{id}/attachments/{id}
    ```
    
    Attachments for a [message](xref:graph.message) contained in a child folder of a [mailFolder](xref:graph.mailfolder) in a user's mailbox.  The
    example below shows one level of nesting, but a message can be located in a child of a child and so on.
    
    ```http
    GET /me/mailFolders/{id}/childFolders/{id}/.../messages/{id}/attachments/{id}
    GET /users/{id | userPrincipalName}/mailFolders/{id}/childFolders/{id}/messages/{id}/attachments/{id}
    ```
    
    Attachments for a [post](xref:graph.post) in a [thread](xref:graph.conversationthread) belonging to a [conversation](xref:graph.conversation) of a group.
    
    ```http
    GET /groups/{id}/threads/{id}/posts/{id}/attachments/{id}
    GET /groups/{id}/conversations/{id}/threads/{id}/posts/{id}/attachments/{id}
    ```
    
queryParameters:
  heading: "Optional query parameters"
  intro: |
    This method supports the [OData Query Parameters](http://developer.microsoft.com/en-us/graph/docs/overview/query_parameters) to help customize the response.
requestHeaders:
  heading: "Request headers"
  list:
  - name: "Authorization"
    value: "String"
    description: "Bearer {token}. Required."
requestBody:
  heading: "Request body"
  intro: |
    Do not supply a request body for this method.
response:
  heading: "Response"
  intro: |
    If successful, this method returns a `200 OK` response code and an **attachment** object in the response body. 
    The properties of that type of attachment are returned: [fileAttachment](xref:graph.fileattachment), [itemAttachment](xref:graph.itemattachment), 
    or [referenceAttachment](xref:graph.referenceAttachment).
examples:
  - items:
    - Example (file attachment):
        heading: "Example (file attachment)"
        request:
            heading: "Request"
            intro: |
              Here is an example of the request to get a file attachment on an event.
            sampleCode: |
              ```http
              GET https://graph.microsoft.com/v1.0/me/events/{id}/attachments/{id}
              ```
              
        response:
            heading: "Response"
            intro: |
              Here is an example of the response. Note: The response object shown here may be truncated for brevity. All of the properties will be returned from an actual call.
            sampleCode: |
              ```http
              HTTP/1.1 200 OK
              Content-type: application/json
              Content-length: 199
              
              {
                "@odata.type": "#microsoft.graph.fileAttachment",
                "contentType": "contentType-value",
                "contentLocation": "contentLocation-value",
                "contentBytes": "binary",
                "contentId": "null",
                "lastModifiedDateTime": "2016-01-01T12:00:00Z",
                "id": "id-value",
                "isInline": false,
                "name": "name-value",
                "size": 99
              }
              ```
              
    - Example (item attachment):
        heading: "Example (item attachment)"
        outro: |
          ##### Request 1
          The first example shows how to get an item attachment on a message. The properties of the **itemAttachment** are returned.
          
          ```http
          GET https://graph.microsoft.com/v1.0/me/messages/AAMkADA1M-zAAA=/attachments/AAMkADA1M-CJKtzmnlcqVgqI=
          ```
          
    - Example (reference attachment):
        heading: "Example (reference attachment)"
        request:
            heading: "Request"
            intro: |
              Here is an example of the request to get a reference attachment on an event.
            sampleCode: |
              ```http
              GET https://graph.microsoft.com/v1.0/me/events/{id}/attachments/{id}
              ```
              
        response:
            heading: "Response"
            intro: |
              Here is an example of the response. Note: The response object shown here may be truncated for brevity. All of the properties will be returned from an actual call.
            sampleCode: |
              ```http
              HTTP/1.1 200 OK
              Content-type: application/json
              Content-length: 215
              
              {
                "@odata.type": "#microsoft.graph.referenceAttachment",
                "contentType": "contentType-value",
                "lastModifiedDateTime": "datetime-value",
                "id": "id-value",
                "isInline": false,
                "name": "name-value",
                "size": 99,
              }
              ```
              
