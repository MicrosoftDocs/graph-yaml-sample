### YamlMime:GraphOperation
uid: graph.driveitem_createuploadsession
metadata:
  title: Resumable file upload
  author: rgregg
  ms.author: rgregg
  ms.date: 09/10/2017
  content_git_url: https://github.com/microsoftgraph/microsoft-graph-docs/blob/master/api-reference/v1.0/api/driveitem_createuploadsession.md
summary:
  heading: "Upload large files with an upload session"
  intro: |
    Create an upload session to allow your app to upload files up to the maximum file size.
    An upload session allows your app to upload ranges of the file in sequential API requests, which allows the transfer to be resumed if a connection is dropped while the upload is in progress.
    To upload a file using an upload session, there are two steps:
    
    1. [Create an upload session](#create-an-upload-session)
    1. [Upload bytes to the upload session](#upload-bytes-to-the-upload-session)
    
permissions:
  heading: "Permissions"
  intro: |
    One of the following permissions is required to call this API. To learn more, including how to choose permissions, see [Permissions](../../../concepts/permissions_reference.md).
  list:
  - resource: "Delegated (work or school account)"
    permission: "Files.ReadWrite, Files.ReadWrite.All, Sites.ReadWrite.All"
  - resource: "Delegated (personal Microsoft account)"
    permission: "Files.ReadWrite, Files.ReadWrite.All"
  - resource: "Application"
    permission: "Sites.ReadWrite.All"
  outro: |
    ## Create an upload session
    To begin a large file upload, your app must first request a new upload session.
    This creates a temporary storage location where the bytes of the file will be saved until the complete file is uploaded.
    Once the last byte of the file has been uploaded the upload session is completed and the final file is shown in the destination folder.
section:
  heading: "HTTP request"
  samples:
  - sampleCode: |
      ```http
      POST /drives/{driveId}/items/{itemId}/createUploadSession
      POST /groups/{groupId}/drive/items/{itemId}/createUploadSession
      POST /me/drive/items/{itemId}/createUploadSession
      POST /sites/{siteId}/drive/items/{itemId}/createUploadSession
      POST /users/{userId}/drive/items/{itemId}/createUploadSession
      ```
      
requestHeaders:
  heading: "Optional request headers"
  list:
  - name: "if-match"
    value: "String"
    description: "If this request header is included and the eTag (or cTag) provided does not match the current etag on the item, a 412 Precondition Failed error response is returned."
properties:
  heading: "Properties"
  list:
  - property: "description"
    type: "String"
    description: "Provides a user-visible description of the item. Read-write. Only on OneDrive Personal"
  - property: "fileSystemInfo"
    type: "microsoft.graph.fileSystemInfo"
    description: "File system information on client. Read-write."
  - property: "name"
    type: "String"
    description: "The name of the item (filename and extension). Read-write."
  outro: |
    The response to this request will provide the details of the newly created [uploadSession](xref:graph.uploadsession), which includes the URL used for uploading the parts of the file. 
    
    ```http
    POST /me/drive/root:/{item-path}:/createUploadSession
    Content-Type: application/json
    
    {
      "item": {
        "@odata.type": "microsoft.graph.driveItemUploadableProperties",
        "@microsoft.graph.conflictBehavior": "rename",
        "name": "largefile.dat"
      }
    }
    ```
    
requestBody:
  heading: "Request body"
  intro: |
    No request body is required.
    However, you can specify an `item` property in the request body, providing additional data about the file being uploaded.
    
    ```json
    {
      "@microsoft.graph.conflictBehavior": "rename | fail | overwrite",
      "description": "description",
      "fileSystemInfo": { "@odata.type": "microsoft.graph.fileSystemInfo" },
      "name": "filename.txt"
    }
    ```
    
    For example, to control the behavior if the filename is already taken, you can specify the conflict behavior property in the body of the request.
    
    ```json
    {
      "item": {
        "@microsoft.graph.conflictBehavior": "rename"
      }
    }
    ```
    
response:
  heading: "Response"
  intro: |
    The response to this request, if successful, will provide the details for where the remainder of the requests should be sent as an [UploadSession](xref:graph.uploadSession) resource.
    This resource provides details about where the byte range of the file should be uploaded and when the upload session expires.
  request:
      heading: "request"
      sampleCode: |
        ```http
        HTTP/1.1 200 OK
        Content-Type: application/json
        
        {
          "uploadUrl": "https://sn3302.up.1drv.com/up/fe6987415ace7X4e1eF866337",
          "expirationDateTime": "2015-01-29T09:21:55.523Z"
        }
        ```
        
  outro: |
    ## Upload bytes to the upload session
    To upload the file, or a portion of the file, your app makes a PUT request to the **uploadUrl** value received in the **createUploadSession** response.
    You can upload the entire file, or split the file into multiple byte ranges, as long as the maximum bytes in any given request is less than 60 MiB.
    The fragments of the file must be uploaded sequentially in order.
    Uploading fragments out of order will result in an error.
    **Note:** If your app splits a file into multiple byte ranges, the size of each byte range **MUST** be a multiple of 320 KiB (327,680 bytes). 
    Using a fragment size that does not divide evenly by 320 KiB will result in errors committing some files.
remarks:
  heading: "Remarks"
  intro: |
    * The `nextExpectedRanges` property won't always list all of the missing ranges.
    * On successful fragment writes, it will return the next range to start from (eg. "523-").
    * On failures when the client sent a fragment the server had already received, the server will respond with `HTTP 416 Requested Range Not Satisfiable`. 
      You can [request upload status](#resuming-an-in-progress-upload) to get a more detailed list of missing ranges.
    * Including the Authorization header when issuing the `PUT` call may result in a `HTTP 401 Unauthorized` response. The Authorization header and bearer token should only be sent when issuing the `POST` during the first step. It should be not be included when issueing the `PUT`.
    
  outro: |
    ## Completing a file
    When the last byte range of a file is received the server will response with an `HTTP 201 Created` or `HTTP 200 OK`.
    The response body will also include the default property set for the **driveItem** representing the completed file.
    
    ```
    PUT https://sn3302.up.1drv.com/up/fe6987415ace7X4e1eF866337
    Content-Length: 21
    Content-Range: bytes 101-127/128
    
    <final bytes of the file>
    ```
    
    
    ```http
    HTTP/1.1 201 Created
    Content-Type: application/json
    
    {
      "id": "912310013A123",
      "name": "largefile.vhd",
      "size": 128,
      "file": { }
    }
    ```
    
