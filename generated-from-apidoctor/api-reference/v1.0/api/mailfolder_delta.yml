### YamlMime:GraphOperation
uid:graph.mailfolder_delta
metadata:
  content_git_url: https://github.com/microsoftgraph/microsoft-graph-docs/blob/master/api-reference/v1.0/api/mailfolder_delta.md
summary:
  heading: mailFolder: delta
  intro: |
    Get a set of mail folders that have been added, deleted, or removed from the user's mailbox.
    A **delta** function call for mail folders in a mailbox is similar to a GET request, except that by appropriately 
    applying [state tokens](xref:graph.delta_query_overview) in one or more of these calls, 
    you can query for incremental changes in the mail folders. This allows you to maintain and synchronize 
    a local store of a user's mail folders without having to fetch all the mail folders of that mailbox from the server every time.
permissions:
  heading: Permissions
  intro: |
    One of the following permissions is required to call this API. To learn more, including how to choose permissions, see [Permissions](xref:graph.permissions_reference).
  list:
  - resource: Delegated (work or school account)
    permission: Mail.Read, Mail.ReadWrite
  - resource: Delegated (personal Microsoft account)
    permission: Mail.Read, Mail.ReadWrite
  - resource: Application
    permission: Mail.Read, Mail.ReadWrite
httpRequest:
  heading: HTTP request
  sampleCode: |
    ```http
    GET /me/mailFolders/delta
    GET /users/{id}/mailFolders/delta
    ```
    
queryParameters:
  heading: Optional query parameters
  intro: |
    Tracking changes in mail folders incurs a round of one or more **delta** function calls. If you use any query parameter 
    (other than `$deltatoken` and `$skiptoken`), you must specify 
    it in the initial **delta** request. Microsoft Graph automatically encodes any specified parameters 
    into the token portion of the `nextLink` or `deltaLink` URL provided in the response. 
    You only need to specify any desired query parameters once upfront. 
    In subsequent requests, simply copy and apply the `nextLink` or `deltaLink` URL from the previous response, as that URL already 
    includes the encoded, desired parameters.
  list:
  - name: $deltatoken
    value: String
    description: A state token returned in the deltaLink URL of the previous delta function call for the same mail folder collection, indicating the completion of that round of change tracking. Save and apply the entire deltaLink URL including this token in the first request of the next round of change tracking for that collection.
  - name: $skiptoken
    value: String
    description: A state token returned in the nextLink URL of the previous delta function call, indicating there are further changes to be tracked in the same mail folder collection.
  outro: |
    #### OData query parameters
    You can use a `$select` query parameter as in any GET request to specify only the properties your need for best performance. The 
    _id_ property is always returned. 
requestHeaders:
  heading: Request headers
  list:
  - name: Authorization
    value: String
    description: Bearer {token}. Required.
  - name: Content-Type
    value: String
    description: application/json. Required.
  - name: Prefer
    value: String
    description: odata.maxpagesize={x}. Optional.
response:
  heading: Response
  intro: |
    If successful, this method returns a `200 OK` response code and [mailFolder](xref:graph.mailfolder) collection object in the response body.
examples:
  - items:
    - Example:
        heading: Example
        request:
            heading: Request
            intro: |
              The following example shows how to make a single **delta** function call, and limit the maximum number of mail folders 
              in the response body to 2.
              To track changes in the mail folders of a mailbox, you would make one or more **delta** function calls, with 
              appropriate state tokens, to get the set of incremental changes since the last delta query. 
              You can find a similar example that shows how to use the state tokens to track changes in the messages of a mail folder: 
              [Get incremental changes to messages in a folder](xref:graph.delta_query_messages). The main differences
              between tracking mail folders and tracking messages in a folder are in the delta query request URLs, and the query responses 
              returning **mailFolder** rather than **message** collections.
            sampleCode: |
              ```http
              GET https://graph.microsoft.com/v1.0/me/mailFolders/delta
              
              Prefer: odata.maxpagesize=2
              ```
              
        response:
            heading: Response
            intro: |
              If the request is successful, the response would include a state token, which is either a _skipToken_  
              (in an _@odata.nextLink_ response header) or a _deltaToken_ (in an _@odata.deltaLink_ response header). 
              Respectively, they indicate whether you should continue with the round or you have completed 
              getting all the changes for that round.
              The response below shows a _skipToken_ in an _@odata.nextLink_ response header.
              Note: The response object shown here may be truncated for brevity. All of the properties will be returned from an actual call.
            sampleCode: |
              ```http
              HTTP/1.1 200 OK
              Content-type: application/json
              Content-length: 254
              
              {
                "@odata.nextLink":"https://graph.microsoft.com/v1.0/me/mailfolders/delta?$skiptoken={_skipToken_}",
                "value": [
                  {
                    "displayName": "displayName-value",
                    "parentFolderId": "parentFolderId-value",
                    "childFolderCount": 99,
                    "unreadItemCount": 99,
                    "totalItemCount": 99
                  }
                ]
              }
              ```
              
            outro: |
              ### See also
              
              * [Use delta query to track changes in Microsoft Graph data](xref:graph.delta_query_overview)
              * [Get incremental changes to messages in a folder](xref:graph.delta_query_messages)
              
