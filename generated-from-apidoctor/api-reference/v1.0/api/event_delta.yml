### YamlMime:GraphOperation
uid: graph.event_delta
metadata:
  content_git_url: https://github.com/microsoftgraph/microsoft-graph-docs/blob/master/api-reference/v1.0/api/event_delta.md
summary:
  heading: "event: delta"
  intro: |
    Get a set of events that have been added, deleted, or updated in a **calendarView** (a range of events) 
    of the user's primary calendar.
    A **delta** function call for events is similar to a `GET /calendarview` request for 
    a range of dates in the user's primary calendar, except that by appropriately 
    applying [state tokens](../../../concepts/delta_query_overview.md) in one or more of these calls, 
    you can query for incremental changes in that calender view. This allows you to maintain and synchronize 
    a local store of a user's events in the primary calendar, without having to fetch all the events of that calendar 
    from the server every time.
permissions:
  heading: "Permissions"
  intro: |
    One of the following permissions is required to call this API. To learn more, including how to choose permissions, see [Permissions](../../../concepts/permissions_reference.md).
  list:
  - resource: "Delegated (work or school account)"
    permission: "Calendars.Read"
  - resource: "Delegated (personal Microsoft account)"
    permission: "Calendars.Read"
  - resource: "Application"
    permission: "Calendars.Read"
httpRequest:
  heading: "HTTP request"
  samples:
  - sampleCode: |
      ```http
      GET /me/calendarView/delta?startDateTime={start_datetime}&endDateTime={end_datetime}
      GET /users/{id}/calendarView/delta?startDateTime={start_datetime}&endDateTime={end_datetime}
      ```
      
queryParameters:
  heading: "Query parameters"
  intro: |
    Tracking changes in events incurs a round of one or more **delta** function calls. If you use any query parameter 
    (other than `$deltatoken` and `$skiptoken`), you must specify 
    it in the initial **delta** request. Microsoft Graph automatically encodes any specified parameters 
    into the token portion of the `nextLink` or `deltaLink` URL provided in the response. You only need to specify any desired query parameters once upfront. 
    In subsequent requests, simply copy and apply the `nextLink` or `deltaLink` URL from the previous response, as that URL already 
    includes the encoded, desired parameters.
  list:
  - name: "startDateTime"
    value: "String"
    description: "The start date and time of the time range, represented in ISO 8601 format. For example, \"2015-11-08T19:00:00.0000000\"."
  - name: "endDateTime"
    value: "String"
    description: "The end date and time of the time range, represented in ISO 8601 format. For example, \"2015-11-08T20:00:00.0000000\"."
  - name: "$deltatoken"
    value: "String"
    description: "A state token returned in the deltaLink URL of the previous delta function call for the same calendar view, indicating the completion of that round of change tracking. Save and apply the entire deltaLink URL including this token in the first request of the next round of change tracking for that calendar view."
  - name: "$skiptoken"
    value: "String"
    description: "A state token returned in the nextLink URL of the previous delta function call, indicating there are further changes to be tracked in the same calendar view."
  outro: |
    When you do a delta query on a calendar view, expect to get all the properties you'd normally get from 
    a `GET /calendarview` request. `$select` is not supported in this case. 
requestHeaders:
  heading: "Request headers"
  list:
  - name: "Authorization"
    value: "String"
    description: "Bearer {token}. Required."
  - name: "Content-Type"
    value: "String"
    description: "application/json. Required."
  - name: "Prefer"
    value: "String"
    description: "odata.maxpagesize={x}. Optional."
  - name: "Prefer"
    value: "String"
    description: "{Time zone}. Optional, UTC assumed if absent."
response:
  heading: "Response"
  intro: |
    If successful, this method returns a `200 OK` response code and [event](xref:graph.event) collection object in the response body.
examples:
 - items:
   - request:
      heading: "Request"
      intro: |
        The following example shows how to make a single **delta** function call, and limit the maximum number of events 
        in the response body to 2.
        To track changes in a calendar view, you would make one or more **delta** function calls, with 
        appropriate [state tokens](../../../concepts/delta_query_overview.md), to get the set of incremental changes since the last delta query. 
      sampleCode: |
        ```http
        GET https://graph.microsoft.com/v1.0/me/calendarView/delta?startdatetime={start_datetime}&enddatetime={end_datetime}
        
        Prefer: odata.maxpagesize=2
        ```
        
     response:
      heading: "Response"
      intro: |
        If the request is successful, the response would include a state token, which is either a _skipToken_ 
        (in an _@odata.nextLink_ response header) or a _deltaToken_ (in an _@odata.deltaLink_ response header). 
        Respectively, they indicate whether you should continue with the round or you have completed 
        getting all the changes for that round.
        The response below shows a _skipToken_ in an _@odata.nextLink_ response header.
        Note: The response object shown here may be truncated for brevity. All of the properties will be returned from an actual call.
      sampleCode: |
        ```http
        HTTP/1.1 200 OK
        Content-type: application/json
        Content-length: 359
        
        {
          "@odata.nextLink":"https://graph.microsoft.com/v1.0/me/calendarView/delta?$skiptoken={_skipToken_}",
          "value": [
            {
              "originalStartTimeZone": "originalStartTimeZone-value",
              "originalEndTimeZone": "originalEndTimeZone-value",
              "responseStatus": {
                "response": "response-value",
                "time": "datetime-value"
              },
              "iCalUId": "iCalUId-value",
              "reminderMinutesBeforeStart": 99,
              "isReminderOn": true
            }
          ]
        }
        ```
        
   - request:
      heading: "See also"
      intro: |
        * [Use delta query to track changes in Microsoft Graph data](../../../concepts/delta_query_overview.md)
        * [Get incremental changes to events in a calendar](../../../concepts/delta_query_events.md)
        
